// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	reflect "reflect"
	model "transactionapp/model"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetTransactionByDate mocks base method.
func (m *MockStore) GetTransactionByDate(ctx context.Context, startDate, endDate int64) ([]*model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByDate", ctx, startDate, endDate)
	ret0, _ := ret[0].([]*model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByDate indicates an expected call of GetTransactionByDate.
func (mr *MockStoreMockRecorder) GetTransactionByDate(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByDate", reflect.TypeOf((*MockStore)(nil).GetTransactionByDate), ctx, startDate, endDate)
}

// GetTransactionById mocks base method.
func (m *MockStore) GetTransactionById(ctx context.Context, id string) (*model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionById", ctx, id)
	ret0, _ := ret[0].(*model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionById indicates an expected call of GetTransactionById.
func (mr *MockStoreMockRecorder) GetTransactionById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionById", reflect.TypeOf((*MockStore)(nil).GetTransactionById), ctx, id)
}

// GetTransactionByIds mocks base method.
func (m *MockStore) GetTransactionByIds(ctx context.Context, ids []string) ([]*model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByIds", ctx, ids)
	ret0, _ := ret[0].([]*model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByIds indicates an expected call of GetTransactionByIds.
func (mr *MockStoreMockRecorder) GetTransactionByIds(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByIds", reflect.TypeOf((*MockStore)(nil).GetTransactionByIds), ctx, ids)
}

// InsertTransaction mocks base method.
func (m *MockStore) InsertTransaction(ctx context.Context, transaction *model.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, transaction)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockStoreMockRecorder) InsertTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockStore)(nil).InsertTransaction), ctx, transaction)
}

// InsertTransactions mocks base method.
func (m *MockStore) InsertTransactions(ctx context.Context, transaction []*model.Transaction) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactions", ctx, transaction)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransactions indicates an expected call of InsertTransactions.
func (mr *MockStoreMockRecorder) InsertTransactions(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactions", reflect.TypeOf((*MockStore)(nil).InsertTransactions), ctx, transaction)
}
